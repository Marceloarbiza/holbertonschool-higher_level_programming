================================
Module test: 2-matrix_divided.py
================================


Import module:
--------------
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided


Test cases:
-----------
_________________
Different matrix:
_________________

- Example matrix:
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

- Float and int elements:
>>> matrix = [[1, 2.0, 3], [4.0, 5, 6.0]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

- Different size lists in matrix:
>>> matrix = [[1, 2], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

- Empty list:
>>> matrix = []
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

- Empty rows in list:
>>> matrix = [[], []]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

- List type rows:
>>> matrix = ["School", [4, 5, 6]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

- List type rows:
>>> matrix = [(1, 2, 3), [4, 5, 6]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

- List type rows:
>>> matrix = [1, [4, 5, 6]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

- List type rows:
>>> matrix = ["School", [4, 5, 6]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

- List type rows:
>>> matrix = [{‘nombre’ : 'nestor', ‘apellido’ : 'Plasencia', ‘edad’ : 22}, [4, 5, 6]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

- List element integer or float:
>>> matrix = [[1, 2, '3'], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

- List element integer or float:
>>> matrix = [[1, 2, 'b'], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

- List element integer or float:
>>> matrix = [[1, 2, "School"], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

_____________
Differnt div:
_____________

>>> matrixD = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrixD, '1')
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided(matrixD, 'a')
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided(matrixD, 3.0)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> matrix_divided(matrixD, 7.8j)
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided(matrixD, None)
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided(matrixD)
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'

>>> matrix_divided(matrixD, float('nan'))
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided(matrixD, "School")
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided(matrixD, 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero
